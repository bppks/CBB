local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
if not Rayfield then
    warn("Rayfield did not load! UI will not work.")
    return
end

-- Variables
local aimbotEnabled, aimbotWallCheck, aimbotTeamCheck = false, false, false
local espEnabled, espTracersEnabled, espBoxesEnabled, espNamesEnabled, espDistancesEnabled, espHealthEnabled = false, false, false, false, false, false
local espTeamCheck, espTeamColors = false, false

local aimbotSensitivity = 0.2
local aimbotKey = Enum.KeyCode.E
local aimbotKeyHeld = false

-- Cached ESP drawings table
local espDrawings = {}

-- FOV circle (cache)
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Color = Color3.fromRGB(255, 0, 0)
FOVCircle.Thickness = 2
FOVCircle.Filled = false
FOVCircle.Radius = 100
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

-- Utility Functions
local function IsTargetInFOV(targetPosition)
    local screenPosition, onScreen = Camera:WorldToViewportPoint(targetPosition)
    if onScreen then
        local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - FOVCircle.Position).Magnitude
        return distance <= FOVCircle.Radius
    end
    return false
end

local function GetAllTargets()
    local targets = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            if not aimbotTeamCheck or player.Team ~= LocalPlayer.Team then
                table.insert(targets, player)
            end
        end
    end
    return targets
end

local function GetTargetPosition(target)
    if target.Character and target.Character:FindFirstChild("Head") then
        return target.Character.Head.Position
    end
    return nil
end

local function IsVisible(target)
    local char = LocalPlayer.Character
    local head = char and char:FindFirstChild("Head")
    local targetChar = target.Character
    local targetHead = targetChar and targetChar:FindFirstChild("Head")
    if not (head and targetHead) then return false end
    local origin = head.Position
    local direction = (targetHead.Position - origin).Unit * 500 -- limit raycast distance
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {char}
    raycastParams.IgnoreWater = true
    local result = workspace:Raycast(origin, direction, raycastParams)
    if not result then return true end
    if result.Instance and result.Instance:IsDescendantOf(targetChar) then return true end
    return false
end

local function GetClosestTarget()
    local closestTarget, closestDistance = nil, math.huge
    for _, target in ipairs(GetAllTargets()) do
        local pos = GetTargetPosition(target)
        if pos then
            if IsTargetInFOV(pos) then
                if not aimbotWallCheck or IsVisible(target) then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(pos)
                    if onScreen then
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - FOVCircle.Position).Magnitude
                        if dist < closestDistance then
                            closestDistance = dist
                            closestTarget = target
                        end
                    end
                end
            end
        end
    end
    return closestTarget
end

-- Input handlers for aimbot key
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed then
        if (input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == aimbotKey)
            or (input.UserInputType ~= Enum.UserInputType.Keyboard and input.UserInputType == aimbotKey) then
            aimbotKeyHeld = true
        end
    end
end)
UserInputService.InputEnded:Connect(function(input, processed)
    if (input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == aimbotKey)
        or (input.UserInputType ~= Enum.UserInputType.Keyboard and input.UserInputType == aimbotKey) then
        aimbotKeyHeld = false
    end
end)

-- Throttled Aimbot loop (runs 15 times a second instead of every frame)
coroutine.wrap(function()
    while true do
        if aimbotEnabled and aimbotKeyHeld then
            local target = GetClosestTarget()
            if target then
                local pos = GetTargetPosition(target)
                if pos then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(pos)
                    if onScreen then
                        local mouseLocation = UserInputService:GetMouseLocation()
                        local delta = Vector2.new(screenPos.X, screenPos.Y) - mouseLocation
                        mousemoverel(delta.X * aimbotSensitivity, delta.Y * aimbotSensitivity)
                    end
                end
            end
        end
        wait(1/15) -- ~15 FPS for aimbot calculations, plenty smooth and less lag
    end
end)()

-- FOV Circle update, only on viewport resize
RunService:GetPropertyChangedSignal("ViewportSize"):Connect(function()
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end)

-- ESP Optimization: Create drawings once per player, update their position once per 10 frames
local frameCounter = 0
RunService.RenderStepped:Connect(function()
    if not espEnabled then
        -- Hide all drawings if ESP off
        for _, data in pairs(espDrawings) do
            if data.box then data.box.Visible = false end
            if data.tracer then data.tracer.Visible = false end
            if data.nameText then data.nameText.Visible = false end
            if data.distText then data.distText.Visible = false end
            if data.healthText then data.healthText.Visible = false end
        end
        return
    end

    frameCounter += 1
    if frameCounter % 6 ~= 0 then return end -- only update every 6 frames (~10 times per second at 60 FPS)

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            if not espTeamCheck or player.Team ~= LocalPlayer.Team then
                local char = player.Character
                local headPos = char.Head.Position
                local screenPos, onScreen = Camera:WorldToViewportPoint(headPos)
                if onScreen then
                    local data = espDrawings[player]
                    if not data then
                        -- Create drawings once
                        data = {}
                        if espTracersEnabled then
                            data.tracer = Drawing.new("Line")
                            data.tracer.Color = espTracerColor
                            data.tracer.Thickness = 1
                        end
                        if espBoxesEnabled then
                            data.box = Drawing.new("Square")
                            data.box.Color = espBoxColor
                            data.box.Thickness = 1
                            data.box.Filled = false
                        end
                        if espNamesEnabled then
                            data.nameText = Drawing.new("Text")
                            data.nameText.Color = espNameColor
                            data.nameText.Center = true
                            data.nameText.Outline = true
                            data.nameText.Text = player.Name
                        end
                        if espDistancesEnabled then
                            data.distText = Drawing.new("Text")
                            data.distText.Color = espDistanceColor
                            data.distText.Center = true
                            data.distText.Outline = true
                        end
                        if espHealthEnabled then
                            data.healthText = Drawing.new("Text")
                            data.healthText.Color = espHealthColor
                            data.healthText.Center = true
                            data.healthText.Outline = true
                        end
                        espDrawings[player] = data
                    end

                    -- Update drawing positions and visibility
                    local screenPosVec2 = Vector2.new(screenPos.X, screenPos.Y)
                    if data.tracer then
                        data.tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        data.tracer.To = screenPosVec2
                        data.tracer.Visible = true
                    end
                    if data.box then
                        local size = 50 -- Could be dynamic based on distance if you want
                        data.box.Position = screenPosVec2 - Vector2.new(size / 2, size / 2)
                        data.box.Size = Vector2.new(size, size)
                        data.box.Visible = true
                    end
                    if data.nameText then
                        data.nameText.Position = screenPosVec2 + Vector2.new(0, -30)
                        data.nameText.Text = player.Name
                        data.nameText.Visible = true
                    end
                    if data.distText then
                        local dist = math.floor((char.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
                        data.distText.Position = screenPosVec2 + Vector2.new(0, 20)
                        data.distText.Text = tostring(dist) .. "m"
                        data.distText.Visible = true
                    end
                    if data.healthText then
                        local humanoid = char:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            local health = math.floor(humanoid.Health)
                            data.healthText.Position = screenPosVec2 + Vector2.new(0, 10)
                            data.healthText.Text = "HP: "..health
                            data.healthText.Visible = true
                        else
                            data.healthText.Visible = false
                        end
                    end
                else
                    -- Hide drawings if offscreen
                    local data = espDrawings[player]
                    if data then
                        if data.box then data.box.Visible = false end
                        if data.tracer then data.tracer.Visible = false end
                        if data.nameText then data.nameText.Visible = false end
                        if data.distText then data.distText.Visible = false end
                        if data.healthText then data.healthText.Visible = false end
                    end
                end
            else
                -- Hide drawings for teammates if team check enabled
                local data = espDrawings[player]
                if data then
                    if data.box then data.box.Visible = false end
                    if data.tracer then data.tracer.Visible = false end
                    if data.nameText then data.nameText.Visible = false end
                    if data.distText then data.distText.Visible = false end
                    if data.healthText then data.healthText.Visible = false end
                end
            end
        end
    end
end)

-- FOV Circle toggle example
local function ToggleFOVCircle(enabled)
    FOVCircle.Visible = enabled
end

-- Sample toggles to activate features for testing
aimbotEnabled = true
espEnabled = true
espTracersEnabled = true
espBoxesEnabled = true
espNamesEnabled = true
espDistancesEnabled = true
espHealthEnabled = true
ToggleFOVCircle(true)
